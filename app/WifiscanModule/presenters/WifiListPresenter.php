<?php

namespace App\WifiscanModule\Presenters;

use App\Forms\WifiListFormFactory;
use App\Forms\UploadFileFormFactory;
use App\Service\WifiListService;
use ErrorException;
use IPub\VisualPaginator\DI\VisualPaginatorExtension;
use Nette;
use App\Model;


class WifiListPresenter extends \App\SharedPresenters\BasePresenter
{
	/** @persistent */
	public $lock = 0;
	/** @persistent */
	public $quickFlash = "";
	/** @var WifiListService @inject */
	private $wifiListService;
	/** @var WifiListFormFactory @inject */
	public $wifiListFormFactory;
	/** @var UploadFileFormFactory @inject */
	public $uploadFileFormFactory;

	protected $uploadedFile = null;
	protected $where = [];

	/** @persistent */
	public $pagPerPage = 8;

	/** @persistent */
	public $pagOffset = 0;


	/**
	 * WifiListPresenter constructor.
	 * @param WifiListService $wifiListService
	 */
	public function __construct(WifiListService $wifiListService)
	{
		parent::__construct();
		$this->wifiListService = $wifiListService;
	}


	public function actionDefault()
	{
		parent::actionDefault(); // TODO: Change the autogenerated stub
		$this->defineFilterField();
	}

	public function startup()
	{
		parent::startup(); // TODO: Change the autogenerated stub
	}


	public function renderDefault()
	{
		$this->wifiListService->getList($this->where);
		$visualPaginator = $this['visualPaginator'];
		$visualPaginator->setListPerPage([8, 24, 32, 64, 128]);
		$paginator = $visualPaginator->getPaginator();

		$paginator->itemsPerPage = $visualPaginator->getItemsPerPage();
		$paginator->itemCount = $this->wifiListService->countData();

		$this->pagOffset = $paginator->offset;
		$this->pagPerPage = $paginator->itemsPerPage;

		$this->wifiListService->getList($this->where, $paginator->offset, $paginator->itemsPerPage);

		if ($this->isAjax()) {
			if (!$this->isControlInvalid('editWifiList')
				&& !$this->isControlInvalid('showMap')
				&& !$this->isControlInvalid('importWifiList')) {
				$this->template->list = $this->wifiListService->getRecentLoadData();
				$this->redrawControl('obsah');
			}
		} else {
			$this->template->list = $this->wifiListService->getRecentLoadData();
		}
		$this->template->where = $this->where;
	}

	/**
	 * @return Nette\Application\UI\Form
	 */
	protected function createComponentWifiListForm()
	{
		return $this->wifiListFormFactory->create(function () {
		});
	}

	/**
	 * @return Nette\Application\UI\Form
	 */
	protected function createComponentUploadFileForm()
	{
		return $this->uploadFileFormFactory->create(function () {
			$this->uploadedFile = $this->uploadFileFormFactory->getFile();
			$this->checkUploadedFile();
			$this->redirect('this');
		});
	}

	/**
	 * @return mixed
	 */
	protected function createComponentFilterForm()
	{
		/** @var Nette\Forms\Form $form */
		$form = $this->filterFormFactory->getForm();
		$defaultValues = $this->filterFormFactory->getSessionValues();
		if (!empty($defaultValues)) $form->setDefaults($defaultValues);

		return $this->filterFormFactory->create(function () {
			$this->where = ($this->filterFormFactory->createWhere($this->filterFormFactory->getSessionValues()));
		});
	}

	private function defineFilterField()
	{
		$filter = $this->filterFormFactory;
		$filter->addFilterField('ssid', 'ssid', '%like%');
		$filter->addFilterField('bssid', 'bssid', '%like%');
		$filter->addFilterField('apCapabilities', 'apCapabilities', '%like%');
		$this->where = ($this->filterFormFactory->createWhere($this->filterFormFactory->getSessionValues()));
	}

	/**
	 * @param null $id
	 */
	public function actionEditWifiList($id = null)
	{
		$this->template->editWifiList = true;
		$this->template->idWifiList = $id;

		if (($id != null)) {
			$wifiList = $this->wifiListService->getBy($id);
			$this['wifiListForm']->setDefaults($wifiList);
		}
	}

	/**
	 * @param $id
	 * @throws Nette\Application\AbortException
	 */
	public function handleDeleteWifiList($id)
	{
		$wifiListModel = new Model\WifiListModel($this->wifiListService->getBy($id));
		$this->wifiListService->delete($wifiListModel);
		if ($this->isAjax()) {
			$this->redrawControl('obsah');
		} else {
			$this->redirect(":Admin:WifiList:default");
		}
	}

	public function actionImportWifiList()
	{
	}

	/**
	 * @param null $where
	 */
	public function actionShowMap($where = null)
	{
		if ($where != null) $where = json_encode($where);
		$this->template->showMap = true;
		$this->wifiListService->getList($where, $this->pagOffset, $this->pagPerPage);
		$points = $this->wifiListService->getRecentLoadData();
		$pointArray = [];
		foreach ($points as $item) {
			$lo = $this->DDtoDMS($item->longitude);
			$la = $this->DDtoDMS($item->latitude);
			$pointArray[$item->bssid . " " . $item->ssid] =
				[$la['deg'] . '°' . $la['min'] . "'" . $la['sec'] . '"N,' . $lo['deg'] . '°' . $lo['min'] . "'" . $lo['sec'] . '"E',
					$item->ssid . " " . $item->apCapabilities];
		}

		$this->template->pointlist = json_encode($pointArray);
	}


	/**
	 * @param $dec
	 * @return array
	 */
	public function DDtoDMS($dec)
	{
		$vars = explode(".", $dec);
		$deg = $vars[0];
		$tempma = "0." . $vars[1];

		$tempma = $tempma * 3600;
		$min = floor($tempma / 60);
		$sec = $tempma - ($min * 60);

		return array("deg" => $deg, "min" => $min, "sec" => $sec);
	}

	/**
	 * @throws ErrorException
	 */
	public function checkUploadedFile()
	{
		if ($this->uploadedFile != null) {
			$csv = array_map('str_getcsv', file($this->uploadedFile));
			foreach ($csv as $item) {
				$wifiListModel = ($this->wifiListService->translateArrayIntoModel($item, 'wifiTrackerFieldName'));
				if ($wifiListModel->getUnixTime() != 'Unix time') {

					if ($this->wifiListService->checkBssidExist($wifiListModel->getBssid()) == true) {
						$this->wifiListService->save($wifiListModel);
					}

				}
			}
		}
	}

}
