<?php

class ShLibController
{
	const SH_DIR = '/var/www/public/app/shLib/';

	const SSID_DEFAULT = 'hackberry';
	const PASS_DEFAULT = 'toor1234';

	/**
	 * @return array
	 * @throws Exception
	 */
	public function getNetworkDevices()
	{
		$networkDevicesString = $this->runBashScript('show_net_devices.sh');
		$devicesInLines = DevTools::makeOutputLines($networkDevicesString);
		$macAndIp = self::getIpAndMac();
		return ShLibDataShaping::createNetworkDeviceList($devicesInLines,$macAndIp);
	}

	/**
	 * @param $wlan
	 * @return string|null
	 * @throws Exception
	 */
	public function createWifiAp($wlan){
		if (empty($wlan)){
			throw new Exception('Empty string!');
		}
		$string = 'create_wifi_ap.sh -p ' . self::PASS_DEFAULT . ' -s ' . self::SSID_DEFAULT . ' -w '.$wlan;
		$scriptOutput = $this->runBashScript($string);
		return $scriptOutput;
	}

	/**
	 * @param $wlan
	 * @return string|null
	 * @throws Exception
	 */
	public function deleteWifiAp($wlan){
		if (empty($wlan)){
			throw new Exception('Empty string!');
		}
		$string = 'delete_wifi_ap.sh -s ' . self::SSID_DEFAULT . ' -w '.$wlan;
		$scriptOutput = $this->runBashScript($string);
		return $scriptOutput;
	}

	/**
	 * @return array
	 */
	public function getWifiAp(){
		$wifiApString = $this->runBashScript('show_wifi_ap.sh');
		$wifiApLines = DevTools::makeOutputLines($wifiApString);
		return ShLibDataShaping::createWifiApsList($wifiApLines);
	}

	/**
	 * @throws Exception
	 */
	public function getIpAndMac(){
		$networkDevicesInfoString = $this->runBashScript('ifconfig.sh');

		$devices = [];
		foreach(DevTools::makeOutputLines($networkDevicesInfoString) as $networkDevicesInfoLine){
			if (strpos($networkDevicesInfoLine, 'flags') !== false) {
				$networkDevicesInfoLineExplode = explode(': flags',$networkDevicesInfoLine);
				$devices[] = $networkDevicesInfoLineExplode[0];
			}
		}

		return ShLibDataShaping::createDevicesInfo($devices, $networkDevicesInfoString);
	}

	/**
	 *
	 */
	public function getChipsetAndDriver(){
		$chipsetAndDriversString = $this->runBashScript('airmon_ng.sh');

		$chipsetAndDrivers = [];
		foreach (DevTools::makeOutputLines($chipsetAndDriversString) as $key=>$chipsetAndDriverLine){

			$chipsetAndDriverExplode = explode('\t',$chipsetAndDriverLine);
			foreach ($chipsetAndDriverExplode as $chipsetAndDriver){
				if (!empty($chipsetAndDriver)){
					$chipsetAndDrivers[$key][] = $chipsetAndDriver;
				}
			}
		}
		unset($chipsetAndDrivers[1]);
		$chipsetAndDrivers = array_merge($chipsetAndDrivers,[]);

		$chipsetAndDriversAssoc = [];
		foreach($chipsetAndDrivers as $key=>$chipsetAndDriver){
			$chipsetAndDriversAssoc[$chipsetAndDriver[1]]=[
				'phy'=>$chipsetAndDriver[0],
				'driver'=>$chipsetAndDriver[2],
				'chipset'=>$chipsetAndDriver[3]
			];
		}

		return $chipsetAndDriversAssoc;

	}


	/**
	 * @param $scriptName
	 * @return string|null
	 */
	public function runBashScript($scriptName)
	{
		return shell_exec('cd ' . self::SH_DIR . ' && ./' . $scriptName);
	}

}
